// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Product() ProductResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Brand struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	Category struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	Color struct {
		HexCode func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	Product struct {
		BasePrice func(childComplexity int) int
		Brand     func(childComplexity int) int
		Category  func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Variants  func(childComplexity int) int
	}

	ProductVariant struct {
		Color         func(childComplexity int) int
		ID            func(childComplexity int) int
		Price         func(childComplexity int) int
		Product       func(childComplexity int) int
		Size          func(childComplexity int) int
		SoldQuantity  func(childComplexity int) int
		StockQuantity func(childComplexity int) int
	}

	Query struct {
		Product  func(childComplexity int, id int64) int
		Products func(childComplexity int, limit *int, offset *int) int
	}

	Size struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Brand.id":
		if e.complexity.Brand.ID == nil {
			break
		}

		return e.complexity.Brand.ID(childComplexity), true

	case "Brand.name":
		if e.complexity.Brand.Name == nil {
			break
		}

		return e.complexity.Brand.Name(childComplexity), true

	case "Category.id":
		if e.complexity.Category.ID == nil {
			break
		}

		return e.complexity.Category.ID(childComplexity), true

	case "Category.name":
		if e.complexity.Category.Name == nil {
			break
		}

		return e.complexity.Category.Name(childComplexity), true

	case "Color.hexCode":
		if e.complexity.Color.HexCode == nil {
			break
		}

		return e.complexity.Color.HexCode(childComplexity), true

	case "Color.id":
		if e.complexity.Color.ID == nil {
			break
		}

		return e.complexity.Color.ID(childComplexity), true

	case "Color.name":
		if e.complexity.Color.Name == nil {
			break
		}

		return e.complexity.Color.Name(childComplexity), true

	case "Product.basePrice":
		if e.complexity.Product.BasePrice == nil {
			break
		}

		return e.complexity.Product.BasePrice(childComplexity), true

	case "Product.brand":
		if e.complexity.Product.Brand == nil {
			break
		}

		return e.complexity.Product.Brand(childComplexity), true

	case "Product.category":
		if e.complexity.Product.Category == nil {
			break
		}

		return e.complexity.Product.Category(childComplexity), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.name":
		if e.complexity.Product.Name == nil {
			break
		}

		return e.complexity.Product.Name(childComplexity), true

	case "Product.variants":
		if e.complexity.Product.Variants == nil {
			break
		}

		return e.complexity.Product.Variants(childComplexity), true

	case "ProductVariant.color":
		if e.complexity.ProductVariant.Color == nil {
			break
		}

		return e.complexity.ProductVariant.Color(childComplexity), true

	case "ProductVariant.id":
		if e.complexity.ProductVariant.ID == nil {
			break
		}

		return e.complexity.ProductVariant.ID(childComplexity), true

	case "ProductVariant.price":
		if e.complexity.ProductVariant.Price == nil {
			break
		}

		return e.complexity.ProductVariant.Price(childComplexity), true

	case "ProductVariant.product":
		if e.complexity.ProductVariant.Product == nil {
			break
		}

		return e.complexity.ProductVariant.Product(childComplexity), true

	case "ProductVariant.size":
		if e.complexity.ProductVariant.Size == nil {
			break
		}

		return e.complexity.ProductVariant.Size(childComplexity), true

	case "ProductVariant.soldQuantity":
		if e.complexity.ProductVariant.SoldQuantity == nil {
			break
		}

		return e.complexity.ProductVariant.SoldQuantity(childComplexity), true

	case "ProductVariant.stockQuantity":
		if e.complexity.ProductVariant.StockQuantity == nil {
			break
		}

		return e.complexity.ProductVariant.StockQuantity(childComplexity), true

	case "Query.product":
		if e.complexity.Query.Product == nil {
			break
		}

		args, err := ec.field_Query_product_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Product(childComplexity, args["id"].(int64)), true

	case "Query.products":
		if e.complexity.Query.Products == nil {
			break
		}

		args, err := ec.field_Query_products_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Products(childComplexity, args["limit"].(*int), args["offset"].(*int)), true

	case "Size.id":
		if e.complexity.Size.ID == nil {
			break
		}

		return e.complexity.Size.ID(childComplexity), true

	case "Size.name":
		if e.complexity.Size.Name == nil {
			break
		}

		return e.complexity.Size.Name(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap()
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/schema.graphqls", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean, type: String) on FIELD_DEFINITION

type Product {
    id: ID!
    name: String!
    category: Category @goField(forceResolver: true, name: "Category_id", type: "int64")
    brand: Brand @goField(forceResolver: true, name: "Brand_id", type: "int64")
    basePrice: Float!
    variants: [ProductVariant!]!
}

type ProductVariant {
    id: ID!
    product: Product!
    stockQuantity: Int!
    soldQuantity: Int!
    price: Float!
    size: Size
    color: Color
}

type Size {
    id: ID!
    name: String!
}

type Color {
    id: ID!
    name: String!
    hexCode: String!
}

type Category {
    id: ID!
    name: String!
}

type Brand {
    id: ID!
    name: String!
}

type Query {
    products(limit: Int = 10, offset: Int = 0): [Product!]!
    product(id: ID!): Product
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
